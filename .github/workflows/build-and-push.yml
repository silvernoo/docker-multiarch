# .github/workflows/build-and-push.yml

name: Multi-Platform Build and Push

# 触发条件 (等同于 Drone 的 trigger)
on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*' # 也可以用 '*' 来匹配所有 tag

jobs:
  build-and-push:
    # 运行环境 (等同于 Drone 的 platform)
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # (可选，但推荐) 步骤2: 设置 QEMU，用于多平台构建
      # 这是 docker/build-push-action 的要求，用于模拟不同的 CPU 架构
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤3: 设置 Docker Buildx
      # 这会创建一个 buildx 构建器，替代了 Drone 中的 `docker buildx create/inspect`
      # 注意：如果你的 buildkit 镜像也来自私有仓库，需要配置 driver-opts
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          # 如果你的 buildkit 镜像也来自私有仓库，请取消下面一行的注释
          # driver-opts: image=192.168.0.10:5000/moby/buildkit:buildx-stable-1
          # 如果 buildkit 镜像来自 Docker Hub，则无需此配置
          
      # 步骤4: 配置 Docker 以信任不安全的私有仓库
      # 这替代了 Drone 中 `dockerd-entrypoint.sh --insecure-registry` 的功能
      # 这一步需要在登录和构建之前完成
      - name: Configure Docker for Insecure Registry
        run: |
          echo '{"insecure-registries": ["192.168.0.10:5000"]}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          sleep 5 # 等待 Docker daemon 重启完成

      # 步骤5: 登录到 Docker Hub (或其他 Docker 仓库)
      # 替代了 Drone 中的 `docker login` 命令，更安全
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 步骤6: 生成镜像的元数据 (例如，标签)
      # 这里我们手动生成 short-sha 标签，以匹配 Drone 的 `${DRONE_COMMIT_SHA:0:8}`
      - name: Generate image tags
        id: meta
        run: echo "sha_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        
      # 步骤7: 构建并推送 cowyo 镜像
      - name: Build and push cowyo image
        uses: docker/build-push-action@v5
        with:
          context: cowyo/
          file: cowyo/Dockerfile
          platforms: linux/amd64,linux/386,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/cowyo:latest
            ${{ secrets.DOCKER_USERNAME }}/cowyo:${{ steps.meta.outputs.sha_tag }}
          # 如果构建需要缓存，可以开启下面一行
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      # 步骤8: 构建并推送 gemini-cli 镜像
      - name: Build and push gemini-cli image
        uses: docker/build-push-action@v5
        with:
          context: gemini-cli/
          file: gemini-cli/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/gemini-cli:latest
            ${{ secrets.DOCKER_USERNAME }}/gemini-cli:${{ steps.meta.outputs.sha_tag }}
          # 如果构建需要缓存，可以开启下面一行
          # cache-from: type=gha
          # cache-to: type=gha,mode=max